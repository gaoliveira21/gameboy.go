package cpu

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewGBZ80(t *testing.T) {
	gbz := NewGBZ80()

	assert.EqualValues(t, 0x01, gbz.a, "NewGBZ80 dit not start register A correctly")
	assert.EqualValues(t, 0x00, gbz.b, "NewGBZ80 dit not start register B correctly")
	assert.EqualValues(t, 0x13, gbz.c, "NewGBZ80 dit not start register C correctly")
	assert.EqualValues(t, 0x00, gbz.d, "NewGBZ80 dit not start register D correctly")
	assert.EqualValues(t, 0xD8, gbz.e, "NewGBZ80 dit not start register E correctly")
	assert.EqualValues(t, 0x01, gbz.h, "NewGBZ80 dit not start register H correctly")
	assert.EqualValues(t, 0x4D, gbz.l, "NewGBZ80 dit not start register L correctly")
	assert.EqualValues(t, 0xB0, gbz.flags.value, "NewGBZ80 dit not start flags correctly")
	assert.EqualValues(t, 0x100, gbz.pc, "NewGBZ80 dit not start PC correctly")
	assert.EqualValues(t, 0xFFFE, gbz.sp, "NewGBZ80 dit not start SP correctly")
	assert.EqualValues(t, 0xCF, gbz.mem.Read(0xFF00), "NewGBZ80 dit not boot memory correctly at 0xFF00")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF01), "NewGBZ80 dit not boot memory correctly at 0xFF01")
	assert.EqualValues(t, 0x7E, gbz.mem.Read(0xFF02), "NewGBZ80 dit not boot memory correctly at 0xFF02")
	assert.EqualValues(t, 0xAB, gbz.mem.Read(0xFF04), "NewGBZ80 dit not boot memory correctly at 0xFF04")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF05), "NewGBZ80 dit not boot memory correctly at 0xFF05")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF06), "NewGBZ80 dit not boot memory correctly at 0xFF06")
	assert.EqualValues(t, 0xF8, gbz.mem.Read(0xFF07), "NewGBZ80 dit not boot memory correctly at 0xFF07")
	assert.EqualValues(t, 0xE1, gbz.mem.Read(0xFF0F), "NewGBZ80 dit not boot memory correctly at 0xFF0F")
	assert.EqualValues(t, 0x80, gbz.mem.Read(0xFF10), "NewGBZ80 dit not boot memory correctly at 0xFF10")
	assert.EqualValues(t, 0xBF, gbz.mem.Read(0xFF11), "NewGBZ80 dit not boot memory correctly at 0xFF11")
	assert.EqualValues(t, 0xF3, gbz.mem.Read(0xFF12), "NewGBZ80 dit not boot memory correctly at 0xFF12")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF13), "NewGBZ80 dit not boot memory correctly at 0xFF13")
	assert.EqualValues(t, 0xBF, gbz.mem.Read(0xFF14), "NewGBZ80 dit not boot memory correctly at 0xFF14")
	assert.EqualValues(t, 0x3F, gbz.mem.Read(0xFF16), "NewGBZ80 dit not boot memory correctly at 0xFF16")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF17), "NewGBZ80 dit not boot memory correctly at 0xFF17")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF18), "NewGBZ80 dit not boot memory correctly at 0xFF18")
	assert.EqualValues(t, 0xBF, gbz.mem.Read(0xFF19), "NewGBZ80 dit not boot memory correctly at 0xFF19")
	assert.EqualValues(t, 0x7F, gbz.mem.Read(0xFF1A), "NewGBZ80 dit not boot memory correctly at 0xFF1A")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF1B), "NewGBZ80 dit not boot memory correctly at 0xFF1B")
	assert.EqualValues(t, 0x9F, gbz.mem.Read(0xFF1C), "NewGBZ80 dit not boot memory correctly at 0xFF1C")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF1D), "NewGBZ80 dit not boot memory correctly at 0xFF1D")
	assert.EqualValues(t, 0xBF, gbz.mem.Read(0xFF1E), "NewGBZ80 dit not boot memory correctly at 0xFF1E")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF20), "NewGBZ80 dit not boot memory correctly at 0xFF20")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF21), "NewGBZ80 dit not boot memory correctly at 0xFF21")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF22), "NewGBZ80 dit not boot memory correctly at 0xFF22")
	assert.EqualValues(t, 0xBF, gbz.mem.Read(0xFF23), "NewGBZ80 dit not boot memory correctly at 0xFF23")
	assert.EqualValues(t, 0x77, gbz.mem.Read(0xFF24), "NewGBZ80 dit not boot memory correctly at 0xFF24")
	assert.EqualValues(t, 0xF3, gbz.mem.Read(0xFF25), "NewGBZ80 dit not boot memory correctly at 0xFF25")
	assert.EqualValues(t, 0xF1, gbz.mem.Read(0xFF26), "NewGBZ80 dit not boot memory correctly at 0xFF26")
	assert.EqualValues(t, 0x91, gbz.mem.Read(0xFF40), "NewGBZ80 dit not boot memory correctly at 0xFF40")
	assert.EqualValues(t, 0x85, gbz.mem.Read(0xFF41), "NewGBZ80 dit not boot memory correctly at 0xFF41")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF42), "NewGBZ80 dit not boot memory correctly at 0xFF42")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF43), "NewGBZ80 dit not boot memory correctly at 0xFF43")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF44), "NewGBZ80 dit not boot memory correctly at 0xFF44")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF45), "NewGBZ80 dit not boot memory correctly at 0xFF45")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF46), "NewGBZ80 dit not boot memory correctly at 0xFF46")
	assert.EqualValues(t, 0xFC, gbz.mem.Read(0xFF47), "NewGBZ80 dit not boot memory correctly at 0xFF47")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF48), "NewGBZ80 dit not boot memory correctly at 0xFF48")
	assert.EqualValues(t, 0xFF, gbz.mem.Read(0xFF49), "NewGBZ80 dit not boot memory correctly at 0xFF49")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF4A), "NewGBZ80 dit not boot memory correctly at 0xFF4A")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFF4B), "NewGBZ80 dit not boot memory correctly at 0xFF4B")
	assert.EqualValues(t, 0x00, gbz.mem.Read(0xFFFF), "NewGBZ80 dit not boot memory correctly at 0xFFFF")
}
